[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "yt-shorts-pipeline"
version = "0.1.0"
description = "Pipeline automatizado para generar YouTube Shorts dual-panel"
authors = [{name = "GermÃ¡n Mallo", email = "german.mallo@example.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core pipeline
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "sqlite-utils>=3.35.0",
    
    # Video/Audio processing
    "yt-dlp>=2023.12.30",
    "moviepy>=1.0.3",
    "pydub>=0.25.1",
    "pillow>=10.0.0",
    
    # AI/ML
    "openai-whisper>=20231117",
    "torch>=2.1.0",
    "torchaudio>=2.1.0",
    
    # YouTube API
    "google-api-python-client>=2.110.0",
    "google-auth-oauthlib>=1.1.0",
    "google-auth-httplib2>=0.2.0",
    
    # Utils
    "requests>=2.31.0",
    "python-dateutil>=2.8.2",
    "hashlib-compat>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

gpu = [
    "torch[cuda]>=2.1.0",
    "torchaudio[cuda]>=2.1.0",
]

[project.scripts]
yts = "src.cli:app"

[project.urls]
Homepage = "https://github.com/Dreiko98/YT-Shorts-Dual-Panel-Agent"
Repository = "https://github.com/Dreiko98/YT-Shorts-Dual-Panel-Agent.git"
Issues = "https://github.com/Dreiko98/YT-Shorts-Dual-Panel-Agent/issues"

# Herramientas de desarrollo
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
