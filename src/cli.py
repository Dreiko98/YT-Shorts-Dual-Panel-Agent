#!/usr/bin/env python3
"""
CLI principal para el pipeline de YT Shorts Dual-Panel Agent.
"""

import sys
from pathlib import Path
from typing import Optional

import typer
from rich import print as rprint
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress
from typing_extensions import Annotated

# A√±adir src/ al path para imports
sys.path.insert(0, str(Path(__file__).parent))

app = typer.Typer(
    name="yts",
    help="üé¨ YT Shorts Dual-Panel Agent - Pipeline automatizado para generar YouTube Shorts",
    rich_markup_mode="rich",
)
console = Console()


@app.command()
def discover(
    channel_ids: Annotated[
        Optional[str], 
        typer.Option("--channels", "-c", help="IDs de canales separados por coma")
    ] = None,
    max_videos: Annotated[
        int, 
        typer.Option("--max", "-m", help="M√°ximo n√∫mero de v√≠deos a descubrir")
    ] = 50,
    verbose: Annotated[bool, typer.Option("--verbose", "-v")] = False,
):
    """üîç Descubrir nuevos episodios de podcast usando YouTube Data API."""
    rprint("[yellow]üîç Descubriendo nuevos episodios...[/yellow]")
    
    if not channel_ids:
        rprint("[red]‚ùå No se especificaron canales. Usa --channels o configura channels.yaml[/red]")
        raise typer.Exit(1)
    
    # TODO: Implementar discovery.py
    rprint("[blue]üìã Canales a procesar:[/blue]", channel_ids)
    rprint(f"[blue]üìä L√≠mite de v√≠deos:[/blue] {max_videos}")
    rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")


@app.command()
def download(
    limit: Annotated[
        int, 
        typer.Option("--limit", "-l", help="L√≠mite de descargas simult√°neas")
    ] = 3,
    quality: Annotated[
        str, 
        typer.Option("--quality", "-q", help="Calidad de descarga")
    ] = "best[height<=1080]",
    verbose: Annotated[bool, typer.Option("--verbose", "-v")] = False,
):
    """‚¨áÔ∏è  Descargar podcasts pendientes usando yt-dlp."""
    rprint("[yellow]‚¨áÔ∏è  Descargando podcasts pendientes...[/yellow]")
    
    # TODO: Implementar downloader.py
    rprint(f"[blue]üìä L√≠mite simult√°neo:[/blue] {limit}")
    rprint(f"[blue]üé• Calidad:[/blue] {quality}")
    rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")


@app.command()
def normalize(
    force: Annotated[bool, typer.Option("--force", "-f", help="Forzar renormalizaci√≥n")] = False,
    target_fps: Annotated[int, typer.Option("--fps", help="FPS objetivo")] = 30,
):
    """üéµ Normalizar audio y video (fps, resoluci√≥n, loudness)."""
    rprint("[yellow]üéµ Normalizando audio/video...[/yellow]")
    
    # TODO: Implementar normalize.py
    rprint(f"[blue]üéØ FPS objetivo:[/blue] {target_fps}")
    rprint(f"[blue]üîÑ Forzar renormalizaci√≥n:[/blue] {force}")
    rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")


@app.command()
def transcribe(
    model: Annotated[
        str, 
        typer.Option("--model", "-m", help="Modelo de Whisper")
    ] = "base",
    device: Annotated[
        str, 
        typer.Option("--device", "-d", help="Dispositivo (cpu/cuda)")
    ] = "cpu",
    language: Annotated[
        Optional[str], 
        typer.Option("--lang", "-l", help="Idioma forzado (es, en, etc.)")
    ] = None,
):
    """üìù Generar transcripciones usando Whisper local."""
    rprint("[yellow]üìù Generando transcripciones...[/yellow]")
    
    # TODO: Implementar transcribe.py
    rprint(f"[blue]ü§ñ Modelo Whisper:[/blue] {model}")
    rprint(f"[blue]üíª Dispositivo:[/blue] {device}")
    if language:
        rprint(f"[blue]üåç Idioma:[/blue] {language}")
    rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")


@app.command()
def segment(
    min_duration: Annotated[int, typer.Option("--min", help="Duraci√≥n m√≠nima en segundos")] = 20,
    max_duration: Annotated[int, typer.Option("--max", help="Duraci√≥n m√°xima en segundos")] = 60,
    max_clips: Annotated[int, typer.Option("--clips", help="M√°ximo clips por v√≠deo")] = 3,
):
    """‚úÇÔ∏è Crear clips candidatos basado en transcripciones."""
    rprint("[yellow]‚úÇÔ∏è  Creando clips candidatos...[/yellow]")
    
    # TODO: Implementar segmenter.py
    rprint(f"[blue]‚è±Ô∏è  Duraci√≥n:[/blue] {min_duration}s - {max_duration}s")
    rprint(f"[blue]üìä M√°ximo clips:[/blue] {max_clips}")
    rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")


@app.command()
def compose(
    test_mode: Annotated[bool, typer.Option("--test-mode", help="Modo de prueba con archivos locales")] = False,
    layout: Annotated[str, typer.Option("--layout", help="Layout a usar")] = "default",
    dry_run: Annotated[bool, typer.Option("--dry-run", help="Simular sin generar archivos")] = False,
):
    """üé¨ Componer Shorts finales con dual-panel y subt√≠tulos."""
    rprint("[yellow]üé¨ Componiendo Shorts finales...[/yellow]")
    
    if test_mode:
        rprint("[blue]üéØ Modo de prueba activado[/blue]")
        rprint("[dim]Buscando archivos de ejemplo en data/raw/...[/dim]")
    
    # TODO: Implementar editor.py + layout.py + subtitles.py
    rprint(f"[blue]üé® Layout:[/blue] {layout}")
    rprint(f"[blue]üîç Dry run:[/blue] {dry_run}")
    rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")


@app.command()
def publish(
    limit: Annotated[int, typer.Option("--limit", help="L√≠mite de publicaciones")] = 1,
    schedule: Annotated[bool, typer.Option("--schedule", help="Programar publicaci√≥n")] = False,
    dry_run: Annotated[bool, typer.Option("--dry-run", help="Simular sin publicar")] = False,
):
    """üì§ Publicar Shorts en YouTube usando API oficial."""
    rprint("[yellow]üì§ Publicando en YouTube...[/yellow]")
    
    # TODO: Implementar publisher.py
    rprint(f"[blue]üìä L√≠mite:[/blue] {limit}")
    rprint(f"[blue]‚è∞ Programar:[/blue] {schedule}")
    rprint(f"[blue]üîç Dry run:[/blue] {dry_run}")
    rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")


@app.command()
def status():
    """üìä Mostrar estado actual del pipeline."""
    rprint(Panel.fit(
        "[bold blue]üìä Estado del Pipeline[/bold blue]\n\n"
        "[dim]üîç Videos descubiertos:[/dim] 0\n"
        "[dim]‚¨áÔ∏è  Videos descargados:[/dim] 0\n"
        "[dim]üìù Transcripciones:[/dim] 0\n"
        "[dim]‚úÇÔ∏è  Clips generados:[/dim] 0\n"
        "[dim]üé¨ Shorts compuestos:[/dim] 0\n"
        "[dim]üì§ Publicados:[/dim] 0\n\n"
        "[yellow]‚ö†Ô∏è  Base de datos no inicializada[/yellow]",
        title="Estado",
    ))


@app.command()
def config(
    show: Annotated[bool, typer.Option("--show", help="Mostrar configuraci√≥n actual")] = False,
    validate: Annotated[bool, typer.Option("--validate", help="Validar configuraci√≥n")] = False,
):
    """‚öôÔ∏è Gestionar configuraci√≥n del pipeline."""
    if show:
        rprint("[blue]üìã Configuraci√≥n actual:[/blue]")
        # TODO: Leer y mostrar configuraci√≥n de .env y configs/
        rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")
    
    if validate:
        rprint("[blue]‚úÖ Validando configuraci√≥n...[/blue]")
        # TODO: Validar archivos de configuraci√≥n
        rprint("[yellow]‚ö†Ô∏è  Funcionalidad pendiente de implementar[/yellow]")


@app.command()
def doctor():
    """ü©∫ Diagnosticar problemas del sistema."""
    rprint("[yellow]ü©∫ Ejecutando diagn√≥sticos...[/yellow]")
    
    # Verificar Python
    python_version = sys.version_info
    if python_version >= (3, 11):
        rprint("[green]‚úÖ Python 3.11+ detectado[/green]")
    else:
        rprint("[red]‚ùå Se requiere Python 3.11+[/red]")
    
    # Verificar estructura de carpetas
    data_dir = Path("data")
    if data_dir.exists():
        rprint("[green]‚úÖ Estructura de carpetas creada[/green]")
    else:
        rprint("[red]‚ùå Falta estructura de carpetas (ejecuta 'make setup')[/red]")
    
    # Verificar .env
    env_file = Path(".env")
    if env_file.exists():
        rprint("[green]‚úÖ Archivo .env encontrado[/green]")
    else:
        rprint("[yellow]‚ö†Ô∏è  Archivo .env no encontrado (copia .env.example)[/yellow]")
    
    rprint("[blue]üí° Para m√°s diagn√≥sticos, ejecuta 'make doctor'[/blue]")


if __name__ == "__main__":
    app()
